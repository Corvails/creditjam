"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/complete/page",{

/***/ "(app-pages-browser)/./src/app/complete/algorithm.js":
/*!***************************************!*\
  !*** ./src/app/complete/algorithm.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nconst cards = __webpack_require__(/*! ./finalcreditcard.json */ \"(app-pages-browser)/./src/app/complete/finalcreditcard.json\");\n// Function to filter by credit score\nfunction filterByCreditScore(cards, creditScore) {\n    const allowedTiers = {\n        \"Poor\": [\n            \"0\",\n            \"1\",\n            \"2\"\n        ],\n        \"Fair\": [\n            \"0\",\n            \"1\",\n            \"2\"\n        ],\n        \"Good\": [\n            \"1\",\n            \"2\",\n            \"3\"\n        ],\n        \"Very Good\": [\n            \"1\",\n            \"2\",\n            \"3\"\n        ],\n        \"Excellent\": [\n            \"1\",\n            \"2\",\n            \"3\"\n        ]\n    };\n    let matchedCreditLevel = null;\n    let poor = false;\n    if (creditScore.includes(\"Poor\")) {\n        matchedCreditLevel = \"Poor\";\n        poor = true;\n    } else if (creditScore.includes(\"Fair\")) {\n        matchedCreditLevel = \"Fair\";\n        poor = true;\n    } else if (creditScore.includes(\"Good\")) {\n        matchedCreditLevel = \"Good\";\n    } else if (creditScore.includes(\"Very good\")) {\n        matchedCreditLevel = \"Very Good\";\n    } else if (creditScore.includes(\"Excellent\")) {\n        matchedCreditLevel = \"Excellent\";\n    }\n    // Filter cards by checking if the card's tier is allowed for the user's credit score\n    const filteredCards = cards.filter((card)=>allowedTiers[matchedCreditLevel].includes(card.Tier));\n    return {\n        filteredCards,\n        poor\n    };\n}\n// Function to apply user preferences (nuking)\nfunction applyPreferences(cards, preferences) {\n    return cards.filter((card)=>{\n        if (preferences.isStudent === \"No\" && card.Name.toLowerCase().includes(\"student\")) {\n            return false;\n        }\n        if (preferences.isBusinessOwner === \"No\" && card.Category.toLowerCase().includes(\"business\")) {\n            return false;\n        }\n        if (preferences.interestedInHotelCards === \"No\" && card.Category.toLowerCase().includes(\"hotel\")) {\n            return false;\n        }\n        if (preferences.interestedInAirlineCards === \"No\" && card.Category.toLowerCase().includes(\"airline\")) {\n            return false;\n        }\n        return true;\n    });\n}\nfunction calculateScores(cards, preferences) {\n    return cards.map((card)=>{\n        let score = +card.Score || 50;\n        // Split categories\n        const cardCategories = card.Category ? card.Category.toLowerCase().split(\"/\") : [];\n        const cardName = card.Name ? card.Name.toLowerCase() : \"\";\n        // Apply scoring rules\n        if (preferences.topCategories && preferences.topCategories.length > 0) {\n            // Check if any topCategory matches any of the card's categories\n            const matchesTopCategory = preferences.topCategories.some((category)=>cardCategories.some((cardCategory)=>cardCategory.trim() === category.toLowerCase()));\n            if (matchesTopCategory) {\n                score += 15; // Add 15 points if card's category matches any topCategory\n            }\n        }\n        if (preferences.isStudent === \"Yes\" && cardName.includes(\"student\")) score += 15;\n        if (preferences.isBusinessOwner === \"Yes\" && cardCategories.includes(\"business\")) score += 10;\n        if (preferences.inCreditCardDebt === \"Yes\" && cardCategories.includes(\"balance\")) score += 10;\n        if (preferences.interestedInHotelCards === \"Yes\" && cardCategories.includes(\"hotel\")) score += 500;\n        if (preferences.interestedInAirlineCards === \"Yes\" && cardCategories.includes(\"airline\")) score += 500;\n        if (preferences.preferredAirline) {\n            if (cardName.includes(preferences.preferredAirline.toLowerCase())) {\n                score += 10;\n            }\n        }\n        if (preferences.preferredHotels) {\n            if (cardName.includes(preferences.preferredHotel.toLowerCase())) {\n                score += 20;\n            }\n        }\n        if (preferences.currentBanks && preferences.currentBanks.length > 0) {\n            preferences.currentBanks.forEach((bank)=>{\n                if (cardName.includes(bank.toLowerCase())) {\n                    score += 10;\n                }\n            });\n        }\n        return {\n            ...card,\n            score\n        }; // Return card with updated score\n    });\n}\n// Function to sort and tier cards\nfunction sortAndTierCards(cards) {\n    const tiers = {\n        tier0: [],\n        tier1: [],\n        tier2: [],\n        tier3: []\n    };\n    cards.forEach((card)=>{\n        if (card.Tier === \"0\") tiers.tier0.push(card);\n        else if (card.Tier === \"1\") tiers.tier1.push(card);\n        else if (card.Tier === \"2\") tiers.tier2.push(card);\n        else if (card.Tier === \"3\") tiers.tier3.push(card);\n    });\n    // Sort each tier by the updated score\n    for(const tier in tiers){\n        tiers[tier].sort((a, b)=>b.score - a.score);\n    }\n    return tiers;\n}\n// Function to sort by both category and tier, returning only the top card\nfunction sortByCategoryAndTier(recommendedCards, category, tier) {\n    const cardsInTier = recommendedCards[\"tier\".concat(tier)];\n    if (!cardsInTier) {\n        console.log(\"No cards found for tier: \".concat(tier));\n        return null;\n    }\n    // Filter and organize cards by category\n    const sortedByCategory = {};\n    cardsInTier.forEach((card)=>{\n        const cardCategory = card.Category.toLowerCase();\n        // Perform partial match for category\n        if (cardCategory.includes(category.toLowerCase())) {\n            if (!sortedByCategory[cardCategory]) {\n                sortedByCategory[cardCategory] = [];\n            }\n            sortedByCategory[cardCategory].push(card);\n        }\n    });\n    if (Object.keys(sortedByCategory).length === 0) {\n        console.log(\"No cards found for categories containing: \".concat(category));\n        return null;\n    }\n    let topCard = null;\n    // Find the top card by score across all matching categories\n    for(const matchedCategory in sortedByCategory){\n        const sortedCards = [\n            ...sortedByCategory[matchedCategory]\n        ].sort((a, b)=>b.score - a.score);\n        // Take the first card (highest score) if there is no topCard yet or if the current card has a higher score\n        if (!topCard || sortedCards[0].score > topCard.score) {\n            topCard = sortedCards[0];\n        }\n    }\n    if (!topCard) {\n        console.log(\"No top card found for category containing: \".concat(category, \" and tier: \").concat(tier));\n        return null;\n    }\n    return topCard;\n}\n// Main function to get recommended cards\nfunction getRecommendedCards(userPreferences) {\n    const { filteredCards, poor } = filterByCreditScore(cards, userPreferences.creditScore);\n    const adjustedCards = applyPreferences(filteredCards, userPreferences);\n    const scoredCards = calculateScores(adjustedCards, userPreferences);\n    const sortedCards = sortAndTierCards(scoredCards);\n    return {\n        sortedCards,\n        poor\n    }; // Return poor flag as well\n}\n// Function to get final recommended cards\nfunction finalCards(userInput) {\n    const { sortedCards: recommendedCards, poor } = getRecommendedCards(userInput);\n    const returnCard = [];\n    const cardCategories = userInput.topCategories.map((category)=>category.toLowerCase());\n    let index = 1;\n    if (poor) {\n        index--;\n    }\n    for(let i = 0; i < cardCategories.length; i++){\n        const category = cardCategories[i];\n        const card1 = sortByCategoryAndTier(recommendedCards, category, 0 + index);\n        const card2 = sortByCategoryAndTier(recommendedCards, category, 1 + index);\n        const card3 = sortByCategoryAndTier(recommendedCards, category, 2 + index);\n        if (card1 === null) {\n            returnCard.push(\"N/A\");\n        } else {\n            returnCard.push(card1);\n        }\n        if (card2 === null) {\n            returnCard.push(\"N/A\");\n        } else {\n            returnCard.push(card2);\n        }\n        if (card3 === null) {\n            returnCard.push(\"N/A\");\n        } else {\n            returnCard.push(card3);\n        }\n    }\n    const cardM = sortByCategoryAndTier(recommendedCards, \"Catch All\", 1);\n    if (cardM) returnCard.push(cardM);\n    if (userInput.interestedInHotelCards === \"yes\") {\n        const card = sortByCategoryAndTier(recommendedCards, \"Hotel\", 1);\n        if (card) returnCard.push(card);\n    } else {\n        returnCard.push(\"N/A\");\n    }\n    if (userInput.interestedInAirlineCards === \"yes\") {\n        const card = sortByCategoryAndTier(recommendedCards, \"Airline\", 1);\n        if (card) returnCard.push(card);\n    } else {\n        returnCard.push(\"N/A\");\n    }\n    return returnCard;\n}\nmodule.exports = {\n    finalCards\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/complete/algorithm.js\n"));

/***/ })

});